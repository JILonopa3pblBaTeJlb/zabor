# antibayan.py
import io
import os
import numpy as np
from PIL import Image
import hashlib

# ========== Perceptual Hash (pHash) ==========
def dhash(image, hash_size=16):
    """
    Difference Hash - –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —á–µ–º average hash.
    hash_size=16 –¥–∞—ë—Ç 256 –±–∏—Ç (–≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —á–µ–º –±—ã–ª–æ).
    """
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    image = image.resize((hash_size + 1, hash_size), Image.Resampling.LANCZOS)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    pixels = np.asarray(image.convert('L'))
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –ø–∏–∫—Å–µ–ª—è–º–∏
    diff = pixels[:, 1:] > pixels[:, :-1]
    
    return diff.flatten()


def quick_fingerprint(img_bytes: bytes) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç perceptual hash –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ —Ä–µ—Å–∞–π–∑—É, –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏, –ª–µ–≥–∫–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
    """
    if not img_bytes or len(img_bytes) == 0:
        print("[fingerprint] ‚ùå –ü—É—Å—Ç—ã–µ –±–∞–π—Ç—ã")
        return None
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(io.BytesIO(img_bytes))
        img.verify()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ verify
        img = Image.open(io.BytesIO(img_bytes))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º difference hash
        hash_bits = dhash(img, hash_size=16)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex
        bitstring = "".join('1' if bit else '0' for bit in hash_bits)
        hash_int = int(bitstring, 2)
        hash_hex = format(hash_int, '064x')  # 256 –±–∏—Ç = 64 hex —Å–∏–º–≤–æ–ª–∞
        
        print(f"[fingerprint] ‚úÖ –•–µ—à —Å–æ–∑–¥–∞–Ω: {hash_hex[:16]}...")
        return hash_hex
        
    except Exception as e:
        print(f"[fingerprint] ‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        return None


def extract_video_frame(video_path: str, frame_number: int = 5) -> bytes:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ (–Ω–µ –ø–µ—Ä–≤—ã–π, –∞ –Ω–∞–ø—Ä–∏–º–µ—Ä 5-–π).
    –ü–µ—Ä–≤—ã–µ –∫–∞–¥—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å —á—ë—Ä–Ω—ã–º–∏ –∏–ª–∏ —Å –ª–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    """
    try:
        import subprocess
        import tempfile
        
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            tmp_frame_path = tmp.name
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º N-–π –∫–∞–¥—Ä
        cmd = [
            'ffmpeg',
            '-i', video_path,
            '-vf', f'select=eq(n\\,{frame_number})',
            '-vframes', '1',
            '-f', 'image2',
            '-y',
            tmp_frame_path
        ]
        
        result = subprocess.run(
            cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            timeout=10
        )
        
        if result.returncode != 0:
            print("[video_frame] ‚ùå ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            os.remove(tmp_frame_path)
            return None
        
        with open(tmp_frame_path, 'rb') as f:
            frame_bytes = f.read()
        
        os.remove(tmp_frame_path)
        
        print(f"[video_frame] ‚úÖ –ö–∞–¥—Ä {frame_number} –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ –≤–∏–¥–µ–æ")
        return frame_bytes
        
    except Exception as e:
        print(f"[video_frame] ‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        return None


def hamming_distance(hex1, hex2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç Hamming distance –º–µ–∂–¥—É –¥–≤—É–º—è —Ö–µ—à–∞–º–∏."""
    if not hex1 or not hex2:
        return float('inf')
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    hex1 = hex1.split(":", 1)[-1] if ":" in hex1 else hex1
    hex2 = hex2.split(":", 1)[-1] if ":" in hex2 else hex2
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–π –¥–ª–∏–Ω–µ
    max_len = max(len(hex1), len(hex2))
    hex1 = hex1.zfill(max_len)
    hex2 = hex2.zfill(max_len)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—ã–π –≤–∏–¥
    b1 = bin(int(hex1, 16))[2:].zfill(len(hex1) * 4)
    b2 = bin(int(hex2, 16))[2:].zfill(len(hex2) * 4)
    
    return sum(c1 != c2 for c1, c2 in zip(b1, b2))


def is_duplicate(fp: str, seen: dict, max_distance: int = 15) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ—Ö–æ–∂–∏–π fingerprint –≤ seen.
    max_distance=15 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è ~6% —Ä–∞–∑–ª–∏—á–∏–π (15 –∏–∑ 256 –±–∏—Ç).
    """
    if not fp:
        return False
    
    for old_fp in seen.keys():
        dist = hamming_distance(fp, old_fp)
        if dist <= max_distance:
            print(f"[bayan] üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {dist})")
            return True
    
    return False


def get_media_fingerprint(media_bytes: bytes = None, file_path: str = None, is_video: bool = False) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞.
    """
    if is_video and file_path:
        # –î–ª—è –≤–∏–¥–µ–æ –∏–∑–≤–ª–µ–∫–∞–µ–º 5-–π –∫–∞–¥—Ä (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ intro/logo)
        frame_bytes = extract_video_frame(file_path, frame_number=5)
        if not frame_bytes:
            return None
        return quick_fingerprint(frame_bytes)
    elif media_bytes:
        return quick_fingerprint(media_bytes)
    else:
        print("[fingerprint] ‚ùå –ù—É–∂–Ω—ã –ª–∏–±–æ media_bytes, –ª–∏–±–æ file_path —Å is_video=True")
        return None


def can_fingerprint(file_path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å fingerprint –¥–ª—è —Ñ–∞–π–ª–∞
    (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ —Å –ø—Ä–µ–≤—å—é)
    """
    try:
        Image.open(file_path).verify()
        return True
    except:
        return False
